type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram server = new TestedProgram(server.Main.class);
            server.startInBackground();
            Thread.sleep(500);

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram(client.Main.class);

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    public class Database {
        String[] array = new String[100];

        Database() {
            for (String s : array) {
                s = "";
            }
        }

        public void set(int number, String s) {
            array[number - 1] = s;
        }

        public String get(int number) {
            return array[number - 1];
        }

        public void delete(int number) {
            array[number - 1] = "";
        }
    }
  learner_created: true
- name: src/server/Menu.java
  visible: true
  text: |
    package server;

    import java.util.Scanner;

    public class Menu {
        Database database = new Database();
        private static final Scanner scanner = new Scanner(System.in);

        public void process() {
            while (true) {
                String[] command = scanner.nextLine().split(" ");

                switch (command[0]) {
                    case "get":
                        get(command);
                        break;
                    case "set":
                        set(command);
                        break;
                    case "delete":
                        delete(command);
                        break;
                    case "exit":
                        return;
                }
            }
        }

        public void get(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 100 || "".equals(database.get(number)) || database.get(number) == null) {
                System.out.println("ERROR");
            } else {
                System.out.println(database.get(number));
            }
        }

        public void set(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 100) {
                System.out.println("ERROR");
            } else {
                String value = CommandParser.text(command);
                database.set(number, value);
                System.out.println("OK");
            }
        }

        public void delete(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 100) {
                System.out.println("ERROR");
            } else {
                database.set(number, "");
                System.out.println("OK");
            }
        }
    }
  learner_created: true
- name: src/server/CommandParser.java
  visible: true
  text: |
    package server;

    public class CommandParser {

        public static String text(String[] arr) {
            StringBuilder builder = new StringBuilder();
            for (int i = 2; i < arr.length; i++) {
                builder.append(arr[i] + " ");
            }
            return builder.toString();
        }
    }
  learner_created: true
- name: src/client/Client.java
  visible: true
  learner_created: true
- name: src/server/Server.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/349/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 12 Dec 2020 10:46:44 UTC
record: -1
