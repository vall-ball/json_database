type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonRequestBuilder.java
  visible: false
  text: |-
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;

    class JsonBuilder {

        private final Gson gson = new Gson();
        private final JsonObject jsonObject = new JsonObject();

        private JsonBuilder() {
        }

        public static JsonBuilder newBuilder() {
            return new JsonBuilder();
        }

        public JsonBuilder addValue(String key, String value) {
            jsonObject.addProperty(key, value);
            return this;
        }

        public JsonBuilder addJsonObject(String key, JsonObject object) {
            jsonObject.add(key, object);
            return this;
        }

        public String getAsString() {
            return jsonObject.toString();
        }

        public JsonObject getAsJsonObject() {
            return jsonObject;
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.lang.management.ManagementFactory;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.isObject;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";
        private static final String NO_SUCH_KEY_REASON = "No such key";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";

        private static final String fileName = "db.json";
        private static final String clientDataPath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "client" + File.separator +
            "data";
        private static final String dbFilePath = System.getProperty("user.dir") + File.separator +
            "src" + File.separator +
            "server" + File.separator +
            "data" + File.separator + fileName;

        private static int threadsCount;

        @DynamicTestingMethod
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            if (!Files.exists(Path.of(dbFilePath))) {
                return CheckResult.wrong("Can't find /server/data/db.json file.");
            }

            try (FileWriter fileWriter = new FileWriter(new File(dbFilePath))) {
                fileWriter.write("{}");
            } catch (IOException e) {
                return CheckResult.wrong("Close the db.json file before starting the tests.");
            }

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.correct();
            }

            String setRequest = JsonBuilder.newBuilder()
                .addValue("type", "set")
                .addValue("key", "name")
                .addValue("value", "Kate")
                .getAsJsonObject().toString();

            String getRequest = JsonBuilder.newBuilder()
                .addValue("type", "get")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            String deleteRequest = JsonBuilder.newBuilder()
                .addValue("type", "delete")
                .addValue("key", "name")
                .getAsJsonObject().toString();

            try {
                Files.write(Paths.get(clientDataPath + File.separator + "testSet.json"), setRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testGet.json"), getRequest.getBytes());
                Files.write(Paths.get(clientDataPath + File.separator + "testDelete.json"), deleteRequest.getBytes());
            } catch (IOException e) {
                throw new WrongAnswer("Can't create test files in /client/data/ folder.");
            }


            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult checkDataFolder() {

            if (!Files.exists(Paths.get(clientDataPath))) {
                return CheckResult.wrong("Can't find /client/data/ folder.");
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testInputs() throws InterruptedException {

            threadsCount = getThreadCount();
            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            String requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            String responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "Hello world!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "Hello world!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "1", "-v", "HelloWorld!");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "1")
                    .value("value", "HelloWorld!")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "HelloWorld!")
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "1");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "1");
            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "1")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "set", "-k", "text", "-v", "Some text here");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "text")
                    .value("value", "Some text here")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "text");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "text")
                );
            expectedValue = "Some text here";
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", expectedValue)
                );


            client = getClient();
            output = client.start("-t", "get", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "56");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "56")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );


            client = getClient();
            output = client.start("-t", "delete", "-k", "100");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "100")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-t", "delete", "-k", "That key doesn't exist");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "That key doesn't exist")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );

            client = getClient();
            output = client.start("-in", "testSet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "set")
                    .value("key", "name")
                    .value("value", "Kate")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );


            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                    .value("value", "Kate")
                );

            client = getClient();
            output = client.start("-in", "testDelete.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "delete")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", OK_STATUS)
                );

            client = getClient();
            output = client.start("-in", "testGet.json");

            requestJson = JsonFinder.findRequestJsonObject(output);
            expect(requestJson)
                .asJson()
                .check(isObject()
                    .value("type", "get")
                    .value("key", "name")
                );
            responseJson = JsonFinder.findResponseJsonObject(output);
            expect(responseJson)
                .asJson()
                .check(isObject()
                    .value("response", ERROR_STATUS)
                    .value("reason", NO_SUCH_KEY_REASON)
                );
            checkIfThreadWasCreated();

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }

        private static TestedProgram getClient() {
            return new TestedProgram(client.Main.class);
        }

        private static TestedProgram getServer() {
            return new TestedProgram(server.Main.class);
        }

        private static int getThreadCount() {
            return (int) ManagementFactory.getThreadMXBean().getTotalStartedThreadCount();
        }

        private static void checkIfThreadWasCreated() {
            int total = getThreadCount();

             /*18 threads: 1 server thread and 17 client threads created during the test.
             If the server doesn't handle clients in a new thread then the difference between number of threads
             before and after the test should be equal 18 */
            if (total - threadsCount == 18) {
                throw new WrongAnswer("Looks like you don't process client connection in another thread.\n" +
                    "Every client request should be parsed and handled in a separate thread!");
            }
        }

        @AfterClass
        public static void deleteFiles() {
            try {
                Files.delete(Paths.get(clientDataPath + "testSet.json"));
                Files.delete(Paths.get(clientDataPath + "testGet.json"));
                Files.delete(Paths.get(clientDataPath + "testDelete.json"));
            } catch (IOException ignored) {
            }
        }
    }
  learner_created: false
- name: test/JsonFinder.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class JsonFinder {

        private static final Pattern pattern = Pattern.compile("\\{.+}");

        public static String findRequestJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("type")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'type' key");
        }

        public static String findResponseJsonObject(String output) {

            Matcher matcher = pattern.matcher(output);

            while (matcher.find()) {
                String json = matcher.group();
                if (json.contains("response")) {
                    return json;
                }
            }

            throw new WrongAnswer("Can't find request JSON object in the output.\n" +
                "It should contain 'response' key");
        }
    }
  learner_created: false
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    import java.util.HashMap;
    import java.util.Map;

    public class Database {
        String[] array = new String[1000];
        Map<String, String> map = new HashMap<>();

        Database() {
            for (String s : array) {
                s = "";
            }
        }

        public void set(int number, String s) {
            array[number - 1] = s;
        }

        public String get(int number) {
            return array[number - 1];
        }

        public void delete(int number) {
            array[number - 1] = "";
        }

        //////////map methods//////////

        public void set(String key, String value) {
            map.put(key, value);
        }

        public String get(String key) {
            return map.get(key);
        }

        public void delete(String key) {
            map.remove(key);
        }

    }
  learner_created: true
- name: src/server/Menu.java
  visible: true
  text: |
    package server;

    import java.util.Scanner;

    public class Menu {
        Database database = new Database();
        private static final Scanner scanner = new Scanner(System.in);

        public void process() {
            while (true) {
                String[] command = scanner.nextLine().split(" ");

                switch (command[0]) {
                    case "get":
                        get(command);
                        break;
                    case "set":
                        set(command);
                        break;
                    case "delete":
                        delete(command);
                        break;
                    case "exit":
                        return;
                }
            }
        }

        public void get(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 1000 || "".equals(database.get(number)) || database.get(number) == null) {
                System.out.println("ERROR");
            } else {
                System.out.println(database.get(number));
            }
        }

        public void set(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 1000) {
                System.out.println("ERROR");
            } else {
                String value = CommandParser.text(command);
                database.set(number, value);
                System.out.println("OK");
            }
        }

        public void delete(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 1000) {
                System.out.println("ERROR");
            } else {
                database.set(number, "");
                System.out.println("OK");
            }
        }
    }
  learner_created: true
- name: src/client/Client.java
  visible: true
  text: |
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.Socket;
    import java.net.UnknownHostException;

    public class Client {
        String address = "127.0.0.1";
        int port = 23456;
        String command;

        Client(String command) {
            this.command = command;
        }

        public void work() throws UnknownHostException {
            System.out.println("Client started!");
            try (
                    Socket socket = new Socket(InetAddress.getByName(address), port);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            ) {
                output.writeUTF(command); // sending message to the server
                System.out.println("Sent: " + command);
                String receivedMsg = input.readUTF(); // response message
                System.out.println("Received: " + receivedMsg);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }
  learner_created: true
- name: src/server/CommandParser.java
  visible: true
  text: |
    package server;

    public class CommandParser {

        public static String text(String[] arr) {
            StringBuilder builder = new StringBuilder();
            for (int i = 2; i < arr.length; i++) {
                builder.append(arr[i] + " ");
            }
            return builder.toString();
        }
    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |-
    package server;

    import com.google.gson.Gson;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.net.UnknownHostException;

    public class Server {
        String address = "127.0.0.1";
        int port = 23456;
        Database database = new Database();
        Gson gson = new Gson();

        public void work() throws UnknownHostException {
            try (ServerSocket server = new ServerSocket(port, 50, InetAddress.getByName(address))) {
                System.out.println("Server started!");
                while (true) {
                    try (
                            Socket socket = server.accept();
                            DataInputStream input = new DataInputStream(socket.getInputStream());
                            DataOutputStream output = new DataOutputStream(socket.getOutputStream());
                    ) {
                        String msg = input.readUTF(); // reading a message
                        Command command = gson.fromJson(msg, Command.class);
                        if ("exit".equals(command.type)) {
                            break;
                        }
                        Response response = menu(command);
                        output.writeUTF(gson.toJson(response)); // resend it to the client
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public Response menu(Command command) {
            switch (command.type) {
                case "get":
                    return get(command);
                case "set":
                    return set(command);
                case "delete":
                    return delete(command);
                default:
                    return null;
            }
        }


        public Response get(Command command) {
            Response response = new Response();
            if (!database.map.containsKey(command.key)) {
                response.response = "ERROR";
                response.reason = "No such key";
            } else {
                response.response = "OK";
                response.value = database.get(command.key);
            }
            return response;
        }

        public Response set(Command command) {
            Response response = new Response();
            database.set(command.key, command.value);
            response.response = "OK";
            return response;
        }

        public Response delete(Command command) {
            Response response = new Response();
            if (!database.map.containsKey(command.key)) {
                response.response = "ERROR";
                response.reason = "No such key";
            } else {
                database.delete(command.key);
                response.response = "OK";
            }
            return response;
        }
    }

    /*
     public String menu(String msg) {
            String[] command = msg.split(" ");
            switch (command[0]) {
                case "get":
                    return get(command);
                case "set":
                    return set(command);
                case "delete":
                    return delete(command);
                default:
                    return "";
            }
        }


        public String get(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 1000 || "".equals(database.get(number)) || database.get(number) == null) {
                return "ERROR";
            } else {
                return database.get(number);
            }
        }

        public String set(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 1000) {
                return "ERROR";
            } else {
                String value = CommandParser.text(command);
                database.set(number, value);
                return "OK";
            }
        }

        public String delete(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 1000) {
                return "ERROR";
            } else {
                database.set(number, "");
                return "OK";
            }
        }
     */
  learner_created: true
- name: src/client/ArgsParser.java
  visible: true
  text: |
    package client;

    import java.util.HashMap;
    import java.util.Map;

    public class ArgsParser {
        public String parse(String[] args) {
            if (args.length == 2) {
                return args[1];
            }
            if (args.length == 4) {
                //String answer = args[1] + " " + args[3];
                return args[1] + " " + args[3];
            } else {
                //String answer = args[1] + " " + args[3];
               /* StringBuilder builder = new StringBuilder();
                for (int i = 5; i < args.length; i++) {
                    builder.append(args[i] + " ");
                }*/
                return args[1] + " " + args[3] + " " + args[5];
            }
        }

        public Map<String, String> parseToMap(String[] args) {
            Map<String, String> map = new HashMap<>();
            map.put("type", args[1]);
            if (args.length > 2) {
                map.put("key", args[3]);
            }
            if (args.length > 4) {
                map.put("value", args[5]);
            }
            return map;
        }
    }
  learner_created: true
- name: src/server/Response.java
  visible: true
  text: |
    package server;

    public class Response {
        String response;
        String reason;
        String value;
    }
  learner_created: true
- name: src/server/Command.java
  visible: true
  text: |
    package server;

    public class Command {
        String type;
        String key;
        String value;
    }
  learner_created: true
- name: src/server/FileHandler.java
  visible: true
  learner_created: true
- name: src/client/data/db.json
  visible: true
  learner_created: true
- name: src/client/data/testDelete.json
  visible: true
  learner_created: true
- name: src/client/data/testSet.json
  visible: true
  learner_created: true
- name: src/client/data/testGet.json
  visible: true
  learner_created: true
- name: src/server/Worker.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/352/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 14 Dec 2020 12:27:36 UTC
record: -1
