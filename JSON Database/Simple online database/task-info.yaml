type: edu
files:
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String OK_STATUS = "OK";
        private static final String ERROR_STATUS = "ERROR";

        private static final String WRONG_EXIT = "The server should stop when client sends 'exit' request";
        private static final String WRONG_GET_EMPTY_CELL_WITH_ERROR = "When a client tries to get an empty cell from " +
                "the server, the server should response with 'ERROR' and the client should print that response";
        private static final String WRONG_SET_VALUE_TO_CELL_WITH_OK = "When a client tries to save a value on" +
                " the server, the server should save the value and response with '" + OK_STATUS + "'. The client should " +
                "print that response";
        private static final String WRONG_GET_VALUE = "When a client tries to get a not empty cell from the server, " +
                "the server should response with a value of the cell. The client should pint received value.\n" +
                "May be the problem is in processing 'set' action:\nIf the specified cell already contains " +
                "information, you should simply rewrite it.";
        private static final String WRONG_DELETE = "When a client tries to delete a value from the cell on the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_EMPTY = "When a client tries to delete a cell with an empty value from the server," +
                " the server should assign an empty string to this cell and response with '" + OK_STATUS + "'.";
        private static final String WRONG_DELETE_INDEX_OUT_OF_BOUNDS = "When a user tries to delete a cell which index " +
                "is less than 0 or greater than 1000, the server should response with  '" + ERROR_STATUS + "'.";

        @DynamicTestingMethod
        CheckResult checkExit() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client = getClient();
            client.start("-t", "exit");

            if (!server.isFinished()) {
                server.stop();
                return CheckResult.wrong(WRONG_EXIT);
            }

            return CheckResult.correct();
        }

        @DynamicTestingMethod
        CheckResult testInputs() {

            TestedProgram server = getServer();
            server.startInBackground();

            TestedProgram client;
            String output;
            String expectedValue;

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "Hello world!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "1", "-m", "HelloWorld!");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            expectedValue = "HelloWorld!";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "1");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR + "\nMay be after deleting a cell you didn't " +
                        "assign an empty value to it.");
            }

            client = getClient();
            output = client.start("-t", "set", "-i", "55", "-m", "Some text here");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_SET_VALUE_TO_CELL_WITH_OK);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "55");
            expectedValue = "Some text here";
            if (!output.contains(expectedValue)) {
                return CheckResult.wrong(WRONG_GET_VALUE +
                        "\nExpected:\n" + expectedValue + "\nYour output:\n" + output);
            }

            client = getClient();
            output = client.start("-t", "get", "-i", "56");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_GET_EMPTY_CELL_WITH_ERROR);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "55");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "56");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "100");
            if (!output.toUpperCase().contains(OK_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_EMPTY);
            }

            client = getClient();
            output = client.start("-t", "delete", "-i", "1001");
            if (!output.toUpperCase().contains(ERROR_STATUS)) {
                return CheckResult.wrong(WRONG_DELETE_INDEX_OUT_OF_BOUNDS);
            }

            client = getClient();
            client.start("-t", "exit");

            return CheckResult.correct();
        }


        private static TestedProgram getClient() {
            return new TestedProgram(client.Main.class);
        }

        private static TestedProgram getServer() {
            return new TestedProgram(server.Main.class);
        }

        private static void stopServer() {
            TestedProgram client = getClient();
            client.start("-t", "exit");
        }
    }
  learner_created: false
- name: src/server/Database.java
  visible: true
  text: |
    package server;

    public class Database {
        String[] array = new String[100];

        Database() {
            for (String s : array) {
                s = "";
            }
        }

        public void set(int number, String s) {
            array[number - 1] = s;
        }

        public String get(int number) {
            return array[number - 1];
        }

        public void delete(int number) {
            array[number - 1] = "";
        }
    }
  learner_created: true
- name: src/server/Menu.java
  visible: true
  text: |
    package server;

    import java.util.Scanner;

    public class Menu {
        Database database = new Database();
        private static final Scanner scanner = new Scanner(System.in);

        public void process() {
            while (true) {
                String[] command = scanner.nextLine().split(" ");

                switch (command[0]) {
                    case "get":
                        get(command);
                        break;
                    case "set":
                        set(command);
                        break;
                    case "delete":
                        delete(command);
                        break;
                    case "exit":
                        return;
                }
            }
        }

        public void get(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 100 || "".equals(database.get(number)) || database.get(number) == null) {
                System.out.println("ERROR");
            } else {
                System.out.println(database.get(number));
            }
        }

        public void set(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 100) {
                System.out.println("ERROR");
            } else {
                String value = CommandParser.text(command);
                database.set(number, value);
                System.out.println("OK");
            }
        }

        public void delete(String[] command) {
            int number = Integer.parseInt(command[1]);
            if (number > 100) {
                System.out.println("ERROR");
            } else {
                database.set(number, "");
                System.out.println("OK");
            }
        }
    }
  learner_created: true
- name: src/client/Client.java
  visible: true
  text: |
    package client;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.net.UnknownHostException;

    public class Client {
        String address = "127.0.0.1";
        int port = 23456;

        public void work() throws UnknownHostException {
            System.out.println("Client started!");
            try (
                    Socket socket = new Socket(InetAddress.getByName(address), port);
                    DataInputStream input = new DataInputStream(socket.getInputStream());
                    DataOutputStream output = new DataOutputStream(socket.getOutputStream());
            ) {
                output.writeUTF("Give me a record # 12"); // sending message to the server
                System.out.println("Sent: Give me a record # 12");
                String receivedMsg = input.readUTF(); // response message
                System.out.println("Received: " + receivedMsg);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }
  learner_created: true
- name: src/server/CommandParser.java
  visible: true
  text: |
    package server;

    public class CommandParser {

        public static String text(String[] arr) {
            StringBuilder builder = new StringBuilder();
            for (int i = 2; i < arr.length; i++) {
                builder.append(arr[i] + " ");
            }
            return builder.toString();
        }
    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |-
    package server;

    import java.io.DataInputStream;
    import java.io.DataOutputStream;
    import java.io.IOException;
    import java.net.InetAddress;
    import java.net.ServerSocket;
    import java.net.Socket;
    import java.net.UnknownHostException;

    public class Server {
        String address = "127.0.0.1";
        int port = 23456;

        public void work() throws UnknownHostException {
            try (ServerSocket server = new ServerSocket(port, 50, InetAddress.getByName(address))) {
                System.out.println("Server started!");
                while (true) {
                    try (
                            Socket socket = server.accept();
                            DataInputStream input = new DataInputStream(socket.getInputStream());
                            DataOutputStream output = new DataOutputStream(socket.getOutputStream());
                    ) {

                        String msg = input.readUTF(); // reading a message
                        String[] arr = msg.split(" ");
                        System.out.println("Received: " + msg);
                        String answer = "A record #" + arr[arr.length - 1] + " was sent!";
                        output.writeUTF(answer); // resend it to the client
                        System.out.println("Sent: " + answer);
                        break;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

        }
    }
  learner_created: true
- name: src/client/ArgsParser.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/65/stages/350/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 13 Dec 2020 12:20:44 UTC
record: 3
